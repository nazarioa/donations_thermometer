<?php

/**
 * @file
 * Allows creation of a progress bar block to visually show amount of donations etc
 */

/**
 * Implements hook_permission().
 */
function donations_thermometer_permission() {
  return array('administer donations thermometer' => array(
      'title' => t('Adminster Donations Thermometer'),
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function donations_thermometer_theme($existing, $type, $theme, $path) {
  $items = array();

  $items['donations_thermometer'] = array(
    'arguments' => array('current' => NULL, 'target' => NULL, 'prefix' => NULL, 'postfix' => NULL, 'size' => 'large'),
    'file' => 'includes/theme.inc',
    'template' => 'templates/donations-thermometer',
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function donations_thermometer_block_info() {
  $blocks = array();
  $blocks['thermometer'] = array(
    'info' => t("Donations Thermometer"),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function donations_thermometer_block_view($delta) {
  $block = array();

  if ($delta == 'thermometer') {
    $current = variable_get('donations_thermometer_current', 50);
    $target = variable_get('donations_thermometer_target', 100);
    $prefix = variable_get('donations_thermometer_prefix', '$');
    $postfix = variable_get('donations_thermometer_postfix', '');
    $size = variable_get('donations_thermometer_size', 'large');

    $block['subject'] = t('Progress Thermometer');

    $block['content'] = theme('donations_thermometer', array('current' => $current, 'target' => $target, 'prefix' => $prefix, 'postfix' => $postfix, 'size' => $size));
  }

  return $block;
}

/**
 * Implements hook_block_configure().
 */
function donations_thermometer_block_configure($delta = '') {
  $form = array();
  if ($delta == 'thermometer') {
    $form['donations_thermometer_target'] = array(
      '#type' => 'textfield',
      '#title' => t('Target'),
      '#default_value' => variable_get('donations_thermometer_target', 100),
      '#size' => 9,
      '#maxlength' => 10,
      '#description' => t("The target."),
      '#required' => TRUE,
    );
    $form['donations_thermometer_current'] = array(
      '#type' => 'textfield',
      '#title' => t('Current number'),
      '#default_value' => variable_get('donations_thermometer_current', 50),
      '#size' => 9,
      '#maxlength' => 10,
      '#description' => t("The current number."),
      '#required' => TRUE,
    );
    $form['donations_thermometer_prefix'] = array(
      '#type' => 'textfield',
      '#title' => t('Prefix'),
      '#default_value' => variable_get('donations_thermometer_prefix', ''),
      '#size' => 9,
      '#maxlength' => 10,
      '#description' => t("A prefix."),
      '#required' => FALSE,
    );
    $form['donations_thermometer_postfix'] = array(
      '#type' => 'textfield',
      '#title' => t('Postfix'),
      '#default_value' => variable_get('donations_thermometer_postfix', ''),
      '#size' => 9,
      '#maxlength' => 10,
      '#description' => t("A postfix."),
      '#required' => FALSE,
    );
    $form['donations_thermometer_size'] = array(
      '#type' => 'select',
      '#title' => t('Size'),
      '#default_value' => variable_get('donations_thermometer_size', 'large'),
      '#options' => array(
        'large' => t('Large'),
        'small' => t('Small'),
      ),
      '#description' => t("Choose what size to display the thermometer.")
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function donations_thermometer_block_save($delta = '', $edit = array()) {
  if ($delta == 'thermometer') {
    variable_set('donations_thermometer_target', $edit['donations_thermometer_target']);
    variable_set('donations_thermometer_current', $edit['donations_thermometer_current']);
    variable_set('donations_thermometer_postfix', $edit['donations_thermometer_postfix']);
    variable_set('donations_thermometer_prefix', $edit['donations_thermometer_prefix']);
    variable_set('donations_thermometer_size', $edit['donations_thermometer_size']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds validation of block configuration custom fields.
 */
function donations_thermometer_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
  if ($form['module']['#value'] == 'donations_thermometer') {
    $form['#validate'][] = 'donations_thermometer_block_validate';
  }
}

/**
 * Form validation callback of block configuration.
 */
function donations_thermometer_block_validate(&$form, $form_state) {
  $delta = $form['delta']['#value'];
  if ($delta == 'thermometer') {
    $current = $form_state['values']['donations_thermometer_current'];
    $total = $form_state['values']['donations_thermometer_target'];

    if (!is_numeric($current)) {
      form_set_error('donations_thermometer_current', t('You must select a number for the current number.'));
    }
    else if ($current < 0) {
      form_set_error('donations_thermometer_current', t('Current number must be positive.'));
    }

    if (!is_numeric($total)) {
      form_set_error('donations_thermometer_total', t('You must select a number for the target number.'));
    }
    else if ($total <= 0) {
      form_set_error('donations_thermometer_total', t('Target number must be positive.'));
    }

    if ($current > $total) {
      form_set_error('donations_thermometer_current', t('Current number must be equal to or less than the target.'));
    }
  }
}

/**
 * Implementation of hook_init().
 */
function donations_thermometer_init() {
  // We add CSS and JS files here â€” adding it in hook_block() or
  // in the theme function is incompatible with the block cache.
  // See http://drupal.org/node/214856.
  $module_path = drupal_get_path('module', 'donations_thermometer');
  drupal_add_js($module_path .'/js/donations_thermometer.js');
  drupal_add_css($module_path .'/css/donations_thermometer.css');
}
